name: Supabase Migration CI

# Concurrency group to ensure only one migration run executes at a time
concurrency:
  group: supabase-migration
  cancel-in-progress: true

on:
  push:
    branches: [main]
    paths:
      - 'supabase/migrations/**'
  pull_request:
    branches: [main]
    paths:
      - 'supabase/migrations/**'
  workflow_dispatch:

jobs:
  # Safe validation job for PRs that doesn't touch secrets or database
  validate-migrations:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Validate migration files
        run: |
          echo "🔍 Validating migration files..."

          # Check if migration files exist and have valid SQL syntax
          migration_files=$(find supabase/migrations -name "*.sql" -type f 2>/dev/null || true)

          if [ -z "$migration_files" ]; then
            echo "❌ No migration files found"
            exit 1
          fi

          echo "Found migration files:"
          echo "$migration_files"

          # Basic SQL syntax validation
          for file in $migration_files; do
            echo "Validating $file..."
            if ! grep -q ";" "$file"; then
              echo "⚠️  Warning: $file may not contain valid SQL statements"
            fi
            echo "✅ $file appears valid"
          done

          echo "✅ Migration validation completed successfully!"

  # Migration job that only runs on push to main or manual dispatch
  migrate:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Add overall job timeout
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
      SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Verify environment variables
        run: |
          echo "Checking required environment variables..."
          if [ -z "$SUPABASE_ACCESS_TOKEN" ]; then
            echo "❌ SUPABASE_ACCESS_TOKEN is not set"
            exit 1
          fi
          if [ -z "$SUPABASE_DB_PASSWORD" ]; then
            echo "❌ SUPABASE_DB_PASSWORD is not set"
            exit 1
          fi
          if [ -z "$SUPABASE_PROJECT_ID" ]; then
            echo "❌ SUPABASE_PROJECT_ID is not set"
            exit 1
          fi
          echo "✅ All required environment variables are set"

      - name: Link to Supabase project
        timeout-minutes: 3
        run: |
          echo "🔗 Linking to Supabase project: $SUPABASE_PROJECT_ID"
          supabase link --project-ref "$SUPABASE_PROJECT_ID" \
            --password "$SUPABASE_DB_PASSWORD" --debug

      - name: Check migration status
        timeout-minutes: 2
        run: |
          echo "📋 Checking current migration status..."
          supabase migration list --debug

      - name: Repair migration conflicts
        timeout-minutes: 5
        run: |
          echo "🔧 Checking for migration conflicts..."
          
          # Get the list of remote migrations that aren't local
          remote_only_migrations=$(supabase migration list --debug 2>/dev/null | grep -E '^\s*\|\s*20[0-9]{12}\s*\|' | grep -v 'Local' || true)
          
          if [ -n "$remote_only_migrations" ]; then
            echo "Found remote-only migrations, attempting repair..."
            
            # Extract migration versions (this gets the specific migration we saw: 20250906121030)
            remote_versions=$(echo "$remote_only_migrations" | awk '{print $2}' | grep '^20[0-9]{12}$' || true)
            
            for version in $remote_versions; do
              echo "Marking migration $version as reverted..."
              supabase migration repair --status reverted "$version" --debug || {
                echo "⚠️  Failed to repair migration $version, continuing..."
              }
            done
          else
            echo "✅ No migration conflicts detected"
          fi
          
          # Show updated status
          echo "📋 Migration status after repair:"
          supabase migration list --debug

      - name: Run migrations
        timeout-minutes: 5
        run: |
          echo "🚀 Running migrations..."
          supabase db push --debug

      - name: Verify migration completion
        timeout-minutes: 2
        run: |
          echo "✅ Verifying migration completion..."
          supabase migration list --debug
          echo "Migration workflow completed successfully!"
