name: Supabase Migration CI

on:
  push:
    branches: [main]
    paths:
      - 'supabase/migrations/**'
      - 'supabase/config.toml'
  pull_request:
    branches: [main]
    paths:
      - 'supabase/migrations/**'
      - 'supabase/config.toml'
  workflow_dispatch:

concurrency:
  group: supabase-migrations-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate-migrations:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - uses: supabase/setup-cli@v1
        with:
          version: latest
      - name: Validate migration files (basic)
        run: |
          set -euo pipefail
          files=$(find supabase/migrations -name "*.sql" -type f || true)
          if [ -z "$files" ]; then
            echo "❌ No migration files found"
            exit 1
          fi
          echo "$files" | sed 's/^/ - /'
          echo "✅ Migration validation completed"

  migrate:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      # You can set either of these repo secrets; the step below will pick whichever exists:
      SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
      SUPABASE_PROJECT_ID:  ${{ secrets.SUPABASE_PROJECT_ID }}
      # Quiet noisy DB wire logs
      DEBUG: ""
      SUPABASE_DB_DEBUG: "0"
      SUPABASE_LOG_LEVEL: "warn"
    steps:
      - uses: actions/checkout@v4
      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Resolve project ref and check secrets
        shell: bash
        run: |
          set -euo pipefail
          PROJECT_REF="${SUPABASE_PROJECT_REF:-${SUPABASE_PROJECT_ID:-}}"
          if [ -z "${SUPABASE_ACCESS_TOKEN:-}" ]; then
            echo "❌ SUPABASE_ACCESS_TOKEN is not set (repo Settings → Secrets and variables → Actions)"; exit 1; fi
          if [ -z "$PROJECT_REF" ]; then
            echo "❌ Missing project ref. Set either SUPABASE_PROJECT_REF or SUPABASE_PROJECT_ID to your Supabase Project ID (the value in the URL: app.supabase.com/project/<THIS>/settings)."
            exit 1
          fi
          echo "PROJECT_REF=$PROJECT_REF" >> "$GITHUB_ENV"
          echo "✅ Secrets present"

      - name: Link project
        run: supabase link --project-ref "$PROJECT_REF"

      - name: Apply migrations (quiet + artifact)
        shell: bash
        run: |
          set -euo pipefail
          echo "::group::supabase db push"
          supabase db push --project-ref "$PROJECT_REF" > push.log 2>&1 || {
            echo "❌ Migration failed. Last 200 lines:"; tail -n 200 push.log || true; echo "::endgroup::"; exit 1; }
          echo "✅ Migrations applied successfully."
          echo "::endgroup::"

      - name: Verify migration status
        run: supabase migration list --project-ref "$PROJECT_REF"

      - name: Upload full logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: supabase-push-logs
          path: push.log
