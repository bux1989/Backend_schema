name: Supabase Migration CI

# Concurrency group to ensure only one migration run executes at a time
concurrency:
  group: supabase-migration
  cancel-in-progress: false

on:
  push:
    branches: [main]
    paths:
      - 'supabase/migrations/**'
  pull_request:
    branches: [main]
    paths:
      - 'supabase/migrations/**'
  workflow_dispatch:

jobs:
  # Safe validation job for PRs that doesn't touch secrets or database
  validate-migrations:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Validate migration files
        run: |
          echo "üîç Validating migration files..."

          # Check if migration files exist and have valid SQL syntax
          migration_files=$(find supabase/migrations -name "*.sql" -type f 2>/dev/null || true)

          if [ -z "$migration_files" ]; then
            echo "‚ùå No migration files found"
            exit 1
          fi

          echo "Found migration files:"
          echo "$migration_files"

          # Basic SQL syntax validation
          for file in $migration_files; do
            echo "Validating $file..."
            if ! grep -q ";" "$file"; then
              echo "‚ö†Ô∏è  Warning: $file may not contain valid SQL statements"
            fi
            echo "‚úÖ $file appears valid"
          done

          echo "‚úÖ Migration validation completed successfully!"

  # Migration job that only runs on push to main or manual dispatch
  migrate:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
      SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Verify environment variables
        run: |
          echo "Checking required environment variables..."
          if [ -z "$SUPABASE_ACCESS_TOKEN" ]; then
            echo "‚ùå SUPABASE_ACCESS_TOKEN is not set"
            exit 1
          fi
          if [ -z "$SUPABASE_DB_PASSWORD" ]; then
            echo "‚ùå SUPABASE_DB_PASSWORD is not set"
            exit 1
          fi
          if [ -z "$SUPABASE_PROJECT_ID" ]; then
            echo "‚ùå SUPABASE_PROJECT_ID is not set"
            exit 1
          fi
          echo "‚úÖ All required environment variables are set"

      - name: Link to Supabase project
        run: |
          echo "üîó Linking to Supabase project: $SUPABASE_PROJECT_ID"
          supabase link --project-ref "$SUPABASE_PROJECT_ID" \
            --password "$SUPABASE_DB_PASSWORD" --debug

      - name: Check migration status
        run: |
          echo "üìã Checking current migration status..."
          supabase migration list --debug

      - name: Repair migration history
        run: |
          echo "üîß Repairing migration history to resolve mismatches..."
          
          # Repair the specific migration that exists remotely but not locally
          echo "Marking remote migration 20250906121030 as reverted..."
          if ! supabase migration repair --status reverted 20250906121030 --debug; then
            echo "‚ö†Ô∏è Could not repair migration 20250906121030, continuing anyway..."
          fi
          
          # Mark the local migration as applied in the history
          echo "Marking local migration 20250906121041 as applied..."
          if ! supabase migration repair --status applied 20250906121041 --debug; then
            echo "‚ö†Ô∏è Could not repair migration 20250906121041, continuing anyway..."
          fi
          
          # Show updated status
          echo "üìã Migration status after repair:"
          supabase migration list --debug

      - name: Run migrations
        run: |
          echo "üöÄ Running migrations..."
          # Now try to push the migrations
          supabase db push --debug

      - name: Verify migration completion
        run: |
          echo "‚úÖ Verifying migration completion..."
          supabase migration list --debug
          echo "Migration workflow completed successfully!"
