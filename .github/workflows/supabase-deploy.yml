name: Supabase Migration CI

# Concurrency group to ensure only one migration run executes at a time
concurrency:
  group: supabase-migration
  cancel-in-progress: true

on:
  push:
    branches: [main]
    paths:
      - 'supabase/migrations/**'
  pull_request:
    branches: [main]
    paths:
      - 'supabase/migrations/**'
  workflow_dispatch:
    inputs:
      forceReapplyLatest:
        description: "Force revert and re-apply the latest local migration on remote (use if remote was stamped)"
        required: false
        default: "false"

jobs:
  # Safe validation job for PRs that doesn't touch secrets or database
  validate-migrations:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Validate migration files
        run: |
          echo "üîç Validating migration files..."

          # Check if migration files exist and have valid SQL syntax
          migration_files=$(find supabase/migrations -name "*.sql" -type f 2>/dev/null || true)

          if [ -z "$migration_files" ]; then
            echo "‚ùå No migration files found"
            exit 1
          fi

          echo "Found migration files:"
          echo "$migration_files"

          # Basic SQL syntax validation
          for file in $migration_files; do
            echo "Validating $file..."
            if ! grep -q ";" "$file"; then
              echo "‚ö†Ô∏è  Warning: $file may not contain valid SQL statements"
            fi
            echo "‚úÖ $file appears valid"
          done

          echo "‚úÖ Migration validation completed successfully!"

  # Migration job that only runs on push to main or manual dispatch
  migrate:
    runs-on: ubuntu-latest
    timeout-minutes: 90  # Ensure overall job timeout is >= 10 minutes
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
      SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      # Install psql early so we can log into the DB from the very beginning
      - name: Install PostgreSQL client (psql)
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Verify environment variables
        run: |
          echo "Checking required environment variables..."
          if [ -z "$SUPABASE_ACCESS_TOKEN" ]; then
            echo "‚ùå SUPABASE_ACCESS_TOKEN is not set"
            exit 1
          fi
          if [ -z "$SUPABASE_DB_PASSWORD" ]; then
            echo "‚ùå SUPABASE_DB_PASSWORD is not set"
            exit 1
          fi
          if [ -z "$SUPABASE_PROJECT_ID" ]; then
            echo "‚ùå SUPABASE_PROJECT_ID is not set"
            exit 1
          fi
          echo "‚úÖ All required environment variables are set"

      # Initialize a lightweight CI logging schema/tables you can view in Supabase Studio
      - name: Init CI logging tables
        env:
          PGPASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          DB_CONN="postgresql://postgres.${SUPABASE_PROJECT_ID}:${SUPABASE_DB_PASSWORD}@aws-1-eu-central-1.pooler.supabase.com:6543/postgres"
          psql "$DB_CONN" -v ON_ERROR_STOP=1 -c "create schema if not exists ci;"
          psql "$DB_CONN" -v ON_ERROR_STOP=1 -c "create table if not exists ci.migration_runs (
            run_id text primary key,
            workflow text,
            job text,
            branch text,
            commit_sha text,
            actor text,
            started_at timestamptz default now(),
            finished_at timestamptz,
            status text
          );"
          psql "$DB_CONN" -v ON_ERROR_STOP=1 -c "create table if not exists ci.migration_events (
            id bigserial primary key,
            run_id text references ci.migration_runs(run_id) on delete cascade,
            at timestamptz default now(),
            phase text,
            step text,
            message text
          );"

      - name: Log run started
        env:
          PGPASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          echo "RUN_ID=${GITHUB_RUN_ID}" >> $GITHUB_ENV
          DB_CONN="postgresql://postgres.${SUPABASE_PROJECT_ID}:${SUPABASE_DB_PASSWORD}@aws-1-eu-central-1.pooler.supabase.com:6543/postgres"
          psql "$DB_CONN" -v ON_ERROR_STOP=1 -c "
            insert into ci.migration_runs (run_id, workflow, job, branch, commit_sha, actor, status)
            values ('${GITHUB_RUN_ID}', '${GITHUB_WORKFLOW}', '${GITHUB_JOB}', '${GITHUB_REF}', '${GITHUB_SHA}', '${GITHUB_ACTOR}', 'running')
            on conflict (run_id) do nothing;"
          psql "$DB_CONN" -v ON_ERROR_STOP=1 -c "
            insert into ci.migration_events (run_id, phase, step, message)
            values ('${GITHUB_RUN_ID}', 'start', 'bootstrap', 'Run started');"

      - name: Link to Supabase project
        timeout-minutes: 10
        run: |
          echo "üîó Linking to Supabase project: $SUPABASE_PROJECT_ID"
          supabase link --project-ref "$SUPABASE_PROJECT_ID" \
            --password "$SUPABASE_DB_PASSWORD" --debug

      - name: Log after link
        if: ${{ always() }}
        env:
          PGPASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          DB_CONN="postgresql://postgres.${SUPABASE_PROJECT_ID}:${SUPABASE_DB_PASSWORD}@aws-1-eu-central-1.pooler.supabase.com:6543/postgres"
          psql "$DB_CONN" -c "insert into ci.migration_events (run_id, phase, step, message)
            values ('${RUN_ID}', 'linked', 'link', 'Project linked');"

      - name: Check migration status
        timeout-minutes: 10
        run: |
          echo "üìã Checking current migration status..."
          supabase migration list --debug

      - name: Log after status check
        if: ${{ always() }}
        env:
          PGPASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          DB_CONN="postgresql://postgres.${SUPABASE_PROJECT_ID}:${SUPABASE_DB_PASSWORD}@aws-1-eu-central-1.pooler.supabase.com:6543/postgres"
          psql "$DB_CONN" -c "insert into ci.migration_events (run_id, phase, step, message)
            values ('${RUN_ID}', 'preflight', 'status', 'Status checked');"

      - name: Show remote migration records
        env:
          PGPASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          echo "üßæ supabase_migrations.schema_migrations content:"
          psql "postgresql://postgres.${SUPABASE_PROJECT_ID}:${SUPABASE_DB_PASSWORD}@aws-1-eu-central-1.pooler.supabase.com:6543/postgres" -c \
            "select version, name, coalesce(array_length(statements,1),0) as stmt_count from supabase_migrations.schema_migrations order by version;"

      - name: Optionally force revert latest migration on remote
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.forceReapplyLatest == 'true' }}
        run: |
          set -euo pipefail
          latest_local=$(ls -1 supabase/migrations/*.sql | sort | tail -n1 | xargs -n1 basename | cut -d '_' -f1)
          echo "üîÅ Forcing revert of remote version: $latest_local"
          supabase migration repair --status reverted "$latest_local" --debug
          echo "üìã Status after revert:"
          supabase migration list --debug

      - name: Repair migration conflicts (remote-only)
        timeout-minutes: 10
        run: |
          echo "üîß Checking for migration conflicts..."
          
          # Get the list of remote migrations that aren't local
          remote_only_migrations=$(supabase migration list --debug 2>/dev/null | grep -E '^\s*\|\s*20[0-9]{12}\s*\|' | grep -v 'Local' || true)
          
          if [ -n "$remote_only_migrations" ]; then
            echo "Found remote-only migrations, attempting repair..."
            
            # Extract migration versions
            remote_versions=$(echo "$remote_only_migrations" | awk '{print $2}' | grep '^20[0-9]{12}$' || true)
            
            for version in $remote_versions; do
              echo "Marking migration $version as reverted..."
              supabase migration repair --status reverted "$version" --debug || {
                echo "‚ö†Ô∏è  Failed to repair migration $version, continuing..."
              }
            done
          else
            echo "‚úÖ No remote-only migration conflicts detected"
          fi
          
          # Show updated status
          echo "üìã Migration status after repair:"
          supabase migration list --debug

      - name: Log before push
        if: ${{ always() }}
        env:
          PGPASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          DB_CONN="postgresql://postgres.${SUPABASE_PROJECT_ID}:${SUPABASE_DB_PASSWORD}@aws-1-eu-central-1.pooler.supabase.com:6543/postgres"
          psql "$DB_CONN" -c "insert into ci.migration_events (run_id, phase, step, message)
            values ('${RUN_ID}', 'push_start', 'db_push', 'Starting db push');"

      - name: Run migrations
        timeout-minutes: 30
        run: |
          echo "üöÄ Running migrations..."
          supabase db push --debug

      - name: Log after push
        if: ${{ always() }}
        env:
          PGPASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          DB_CONN="postgresql://postgres.${SUPABASE_PROJECT_ID}:${SUPABASE_DB_PASSWORD}@aws-1-eu-central-1.pooler.supabase.com:6543/postgres"
          psql "$DB_CONN" -c "insert into ci.migration_events (run_id, phase, step, message)
            values ('${RUN_ID}', 'push_done', 'db_push', 'db push finished');"

      - name: Verify migration completion
        timeout-minutes: 10
        env:
          PGPASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          echo "‚úÖ Verifying migration completion..."
          supabase migration list --debug
          echo "üßæ supabase_migrations.schema_migrations content (post-push):"
          psql "postgresql://postgres.${SUPABASE_PROJECT_ID}:${SUPABASE_DB_PASSWORD}@aws-1-eu-central-1.pooler.supabase.com:6543/postgres" -c \
            "select version, name, coalesce(array_length(statements,1),0) as stmt_count from supabase_migrations.schema_migrations order by version;"

      # Final status markers (visible in Supabase Studio)
      - name: Mark run success
        if: ${{ success() }}
        env:
          PGPASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          DB_CONN="postgresql://postgres.${SUPABASE_PROJECT_ID}:${SUPABASE_DB_PASSWORD}@aws-1-eu-central-1.pooler.supabase.com:6543/postgres"
          psql "$DB_CONN" -c "update ci.migration_runs set finished_at = now(), status = 'success' where run_id = '${RUN_ID}';"
          psql "$DB_CONN" -c "insert into ci.migration_events (run_id, phase, step, message)
            values ('${RUN_ID}', 'done', 'complete', 'Run finished successfully');"

      - name: Mark run failed
        if: ${{ failure() }}
        env:
          PGPASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          DB_CONN="postgresql://postgres.${SUPABASE_PROJECT_ID}:${SUPABASE_DB_PASSWORD}@aws-1-eu-central-1.pooler.supabase.com:6543/postgres"
          psql "$DB_CONN" -c "update ci.migration_runs set finished_at = now(), status = 'failure' where run_id = '${RUN_ID}';"
          psql "$DB_CONN" -c "insert into ci.migration_events (run_id, phase, step, message)
            values ('${RUN_ID}', 'done', 'complete', 'Run failed');"

      - name: Mark run cancelled
        if: ${{ cancelled() }}
        env:
          PGPASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          DB_CONN="postgresql://postgres.${SUPABASE_PROJECT_ID}:${SUPABASE_DB_PASSWORD}@aws-1-eu-central-1.pooler.supabase.com:6543/postgres"
          psql "$DB_CONN" -c "update ci.migration_runs set finished_at = now(), status = 'cancelled' where run_id = '${RUN_ID}';"
          psql "$DB_CONN" -c "insert into ci.migration_events (run_id, phase, step, message)
            values ('${RUN_ID}', 'done', 'complete', 'Run cancelled');"
