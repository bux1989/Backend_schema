name: Supabase Migration CI

concurrency:
  group: supabase-migrations-${{ github.ref }}
  cancel-in-progress: false

on:
  push:
    branches: [ main ]
    paths: 
      - 'supabase/migrations/**'
      - 'supabase/config.toml'
  pull_request:
    branches: [ main ]
    paths:
      - 'supabase/migrations/**'
      - 'supabase/config.toml'
  workflow_dispatch:

jobs:
  migrate:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
      SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Cache Supabase CLI
        uses: actions/cache@v3
        with:
          path: ~/.cache/supabase
          key: ${{ runner.os }}-supabase-${{ hashFiles('supabase/config.toml') }}
          restore-keys: |
            ${{ runner.os }}-supabase-

      - name: Verify environment variables
        run: |
          echo "Checking required environment variables..."
          if [ -z "$SUPABASE_ACCESS_TOKEN" ]; then
            echo "‚ùå SUPABASE_ACCESS_TOKEN is not set"
            exit 1
          fi
          if [ -z "$SUPABASE_DB_PASSWORD" ]; then
            echo "‚ùå SUPABASE_DB_PASSWORD is not set"
            exit 1
          fi
          if [ -z "$SUPABASE_PROJECT_ID" ]; then
            echo "‚ùå SUPABASE_PROJECT_ID is not set"
            exit 1
          fi
          echo "‚úÖ All required environment variables are set"

      - name: Link to Supabase project
        run: |
          echo "üîó Linking to Supabase project: $SUPABASE_PROJECT_ID"
          supabase link --project-ref "$SUPABASE_PROJECT_ID" --password "$SUPABASE_DB_PASSWORD" --debug

      - name: Check migration status
        run: |
          echo "üìã Checking current migration status..."
          supabase migration list --debug

      - name: Run migrations non-interactively
        run: |
          echo "üöÄ Running migrations non-interactively with debug output..."
          supabase db push --debug
        continue-on-error: false

      - name: Verify migration completion
        run: |
          echo "‚úÖ Verifying migration completion..."
          supabase migration list --debug
          echo "Migration workflow completed successfully!"

      - name: Post-migration validation
        run: |
          echo "üîç Performing post-migration validation..."
          # Check if all migrations were applied successfully
          PENDING_MIGRATIONS=$(supabase migration list --format json | jq '[.[] | select(.applied == false)] | length')
          if [ "$PENDING_MIGRATIONS" -gt 0 ]; then
            echo "‚ùå Found $PENDING_MIGRATIONS pending migration(s)"
            exit 1
          else
            echo "‚úÖ All migrations applied successfully"
          fi
