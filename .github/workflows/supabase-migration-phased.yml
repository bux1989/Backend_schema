name: Supabase Migration CI (phased)

concurrency:
  group: supabase-migrations-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main ]
    paths:
      - 'supabase/migrations/**'
      - 'supabase/config.toml'
      - '.github/workflows/supabase-migration-ci-phased.yml'
  workflow_dispatch:
    inputs:
      phase:
        description: "Which phase to run"
        required: true
        default: all
        type: choice
        options:
          - all
          - tables
          - foreign_keys
          - indexes
          - views_functions
          - triggers_policies

jobs:
  migrate-phased:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
      SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
      # Quiet CLI and fail fast on locks
      DEBUG: ""
      SUPABASE_DB_DEBUG: "0"
      SUPABASE_LOG_LEVEL: "warn"
      PGOPTIONS: -c lock_timeout=5s -c statement_timeout=20min -c idle_in_transaction_session_timeout=1min
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Verify required secrets
        run: |
          set -euo pipefail
          [ -n "${SUPABASE_ACCESS_TOKEN:-}" ] || { echo "❌ SUPABASE_ACCESS_TOKEN is not set"; exit 1; }
          [ -n "${SUPABASE_PROJECT_ID:-}" ]   || { echo "❌ SUPABASE_PROJECT_ID is not set"; exit 1; }
          [ -n "${SUPABASE_DB_PASSWORD:-}" ]  || { echo "❌ SUPABASE_DB_PASSWORD is not set (Dashboard → Project Settings → Database password)"; exit 1; }
          echo "✅ Secrets present"

      - name: Link to Supabase project (non-interactive)
        run: supabase link --project-ref "$SUPABASE_PROJECT_ID" --password "$SUPABASE_DB_PASSWORD"

      - name: Quick DB ping (sanity check)
        shell: bash
        run: |
          set -euo pipefail
          cat > /tmp/ping.sql <<'SQL'
          SELECT current_user, current_database();
          SQL
          supabase db execute --file /tmp/ping.sql

      - name: Stage all migrations for phase filtering
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p /tmp/all supabase/migrations
          shopt -s nullglob
          cp supabase/migrations/*.sql /tmp/all/ || true
          echo "Staged files:"
          ls -1 /tmp/all || true

      - name: Set PHASE env
        run: echo "PHASE=${{ github.event_name == 'workflow_dispatch' && inputs.phase || 'all' }}" >> $GITHUB_ENV

      # 01 Tables
      - name: Apply 01_tables
        if: ${{ env.PHASE == 'all' || env.PHASE == 'tables' }}
        shell: bash
        run: |
          set -euo pipefail
          rm -f supabase/migrations/*.sql || true
          shopt -s nullglob
          files=(/tmp/all/*-01_*.sql)
          if [ ${#files[@]} -eq 0 ]; then
            echo "ℹ️ No 01_* files found; skipping"
          else
            cp "${files[@]}" supabase/migrations/
            echo "::group::supabase db push (01)"
            if ! supabase db push > push-01.log 2>&1; then
              tail -n 200 push-01.log || true
              echo "::endgroup::"
              exit 1
            fi
            echo "::endgroup::"
          fi

      # 02 Foreign Keys
      - name: Apply 02_foreign_keys
        if: ${{ env.PHASE == 'all' || env.PHASE == 'foreign_keys' }}
        shell: bash
        run: |
          set -euo pipefail
          rm -f supabase/migrations/*.sql || true
          shopt -s nullglob
          files=(/tmp/all/*-02_*.sql)
          if [ ${#files[@]} -eq 0 ]; then
            echo "ℹ️ No 02_* files found; skipping"
          else
            cp "${files[@]}" supabase/migrations/
            echo "::group::supabase db push (02)"
            if ! supabase db push > push-02.log 2>&1; then
              tail -n 200 push-02.log || true
              echo "::endgroup::"
              exit 1
            fi
            echo "::endgroup::"
          fi

      # 03 Indexes
      - name: Apply 03_indexes
        if: ${{ env.PHASE == 'all' || env.PHASE == 'indexes' }}
        shell: bash
        run: |
          set -euo pipefail
          rm -f supabase/migrations/*.sql || true
          shopt -s nullglob
          files=(/tmp/all/*-03_*.sql)
          if [ ${#files[@]} -eq 0 ]; then
            echo "ℹ️ No 03_* files found; skipping"
          else
            cp "${files[@]}" supabase/migrations/
            echo "::group::supabase db push (03)"
            # If you use CREATE INDEX CONCURRENTLY and CLI complains about transactions,
            # split those into a separate file and use `supabase db execute` instead.
            if ! supabase db push > push-03.log 2>&1; then
              tail -n 200 push-03.log || true
              echo "::endgroup::"
              exit 1
            fi
            echo "::endgroup::"
          fi

      # 04 Views & Functions
      - name: Apply 04_views_functions
        if: ${{ env.PHASE == 'all' || env.PHASE == 'views_functions' }}
        shell: bash
        run: |
          set -euo pipefail
          rm -f supabase/migrations/*.sql || true
          shopt -s nullglob
          files=(/tmp/all/*-04_*.sql)
          if [ ${#files[@]} -eq 0 ]; then
            echo "ℹ️ No 04_* files found; skipping"
          else
            cp "${files[@]}" supabase/migrations/
            echo "::group::supabase db push (04)"
            if ! supabase db push > push-04.log 2>&1; then
              tail -n 200 push-04.log || true
              echo "::endgroup::"
              exit 1
            fi
            echo "::endgroup::"
          fi

      # 05 Triggers & Policies
      - name: Apply 05_triggers_policies
        if: ${{ env.PHASE == 'all' || env.PHASE == 'triggers_policies' }}
        shell: bash
        run: |
          set -euo pipefail
          rm -f supabase/migrations/*.sql || true
          shopt -s nullglob
          files=(/tmp/all/*-05_*.sql)
          if [ ${#files[@]} -eq 0 ]; then
            echo "ℹ️ No 05_* files found; skipping"
          else
            cp "${files[@]}" supabase/migrations/
            echo "::group::supabase db push (05)"
            if ! supabase db push > push-05.log 2>&1; then
              tail -n 200 push-05.log || true
              echo "::endgroup::"
              exit 1
            fi
            echo "::endgroup::"
          fi

      - name: Verify migration status
        if: ${{ success() && (env.PHASE == 'all') }}
        run: supabase migration list

      - name: Diagnose blocking (if a phase failed)
        if: failure()
        shell: bash
        run: |
          echo "::group::Blocking diagnostics"
          cat > /tmp/locks.sql <<'SQL'
          SELECT now() AS now, pid, wait_event_type, wait_event, state,
                 age(clock_timestamp(), query_start) AS running_for,
                 usename, application_name,
                 regexp_replace(query, '\s+', ' ', 'g') AS query
          FROM pg_stat_activity
          WHERE state <> 'idle'
          ORDER BY query_start;

          WITH blocked AS (
            SELECT blocked_locks.pid AS blocked_pid, blocked_activity.query AS blocked_query,
                   blocking_locks.pid AS blocking_pid, blocking_activity.query AS blocking_query,
                   blocked_activity.query_start AS blocked_since
            FROM pg_locks blocked_locks
            JOIN pg_stat_activity blocked_activity ON blocked_activity.pid = blocked_locks.pid
            JOIN pg_locks blocking_locks ON blocking_locks.locktype = blocked_locks.locktype
                 AND blocking_locks.DATABASE IS NOT DISTINCT FROM blocked_locks.DATABASE
                 AND blocking_locks.relation IS NOT DISTINCT FROM blocked_locks.relation
                 AND blocking_locks.page IS NOT DISTINCT FROM blocked_locks.page
                 AND blocking_locks.tuple IS NOT DISTINCT FROM blocked_locks.tuple
                 AND blocking_locks.classid IS NOT DISTINCT FROM blocked_locks.classid
                 AND blocking_locks.objid IS NOT DISTINCT FROM blocked_locks.objid
                 AND blocking_locks.objsubid IS NOT DISTINCT FROM blocked_locks.objsubid
                 AND blocking_locks.pid <> blocked_locks.pid
            JOIN pg_stat_activity blocking_activity ON blocking_activity.pid = blocking_locks.pid
            WHERE NOT blocked_locks.GRANTED
          )
          SELECT * FROM blocked;
          SQL
          # Linked already; no --project-ref needed
          supabase db execute --file /tmp/locks.sql || true
          echo "::endgroup::"

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: supabase-phased-logs
          path: |
            push-01.log
            push-02.log
            push-03.log
            push-04.log
            push-05.log
          if-no-files-found: ignore
